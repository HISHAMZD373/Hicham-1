// server.js - Full-Stack Application (Backend + Frontend + Testing + Deployment)
import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom';
import express from 'express';
import mongoose from 'mongoose';
import cors from 'cors';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';
import dotenv from 'dotenv';
import Stripe from 'stripe';
import { createTerminus } from '@godaddy/terminus';
import http from 'http';
import cluster from 'cluster';
import os from 'os';
import morgan from 'morgan';
import { body, validationResult } from 'express-validator';
import crypto from 'crypto';
import { exec } from 'child_process';

// Load environment variables
dotenv.config();

// Initialize app and services
const app = express();
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);
const numCPUs = os.cpus().length;

// Security configuration
const SECURITY = {
  JWT_SECRET: process.env.JWT_SECRET || crypto.randomBytes(64).toString('hex'),
  SALT_ROUNDS: 12,
  RATE_LIMIT: 100,
  CSP_DIRECTIVES: {
    defaultSrc: ["'self'"],
    scriptSrc: ["'self'", "'unsafe-inline'"],
    styleSrc: ["'self'", "'unsafe-inline'"],
    imgSrc: ["'self'", 'data:'],
    connectSrc: ["'self'"],
    fontSrc: ["'self'"],
    objectSrc: ["'none'"],
    frameAncestors: ["'none'"]
  }
};

// Database connection
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  useCreateIndex: true,
  useFindAndModify: false
}).then(() => console.log('Database connected successfully'))
  .catch(err => {
    console.error('Database connection failed:', err);
    process.exit(1);
  });

// Middleware
app.use(express.json({ limit: '10kb' }));
app.use(helmet({ contentSecurityPolicy: { directives: SECURITY.CSP_DIRECTIVES } }));
app.use(cors({ origin: process.env.ALLOWED_ORIGINS.split(','), methods: ['GET', 'POST'] }));
app.use(rateLimit({ windowMs: 15 * 60 * 1000, max: SECURITY.RATE_LIMIT }));
app.use(morgan('combined'));

// Database models
const userSchema = new mongoose.Schema({
  email: { type: String, unique: true, required: true },
  password: { type: String, required: true },
  role: { type: String, enum: ['user', 'admin'], default: 'user' },
  loginAttempts: { type: Number, default: 0 },
  lockUntil: { type: Number }
}, { timestamps: true });

userSchema.pre('save', async function(next) {
  if (this.isModified('password')) {
    this.password = await bcrypt.hash(this.password, SECURITY.SALT_ROUNDS);
  }
  next();
});

const User = mongoose.model('User', userSchema);

// API Routes
app.post('/api/register', [
  body('email').isEmail().normalizeEmail(),
  body('password').isLength({ min: 12 })
], async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });

  try {
    const user = new User(req.body);
    await user.save();
    res.status(201).json({ message: 'User registered successfully' });
  } catch (error) {
    res.status(500).json({ error: 'Registration failed' });
  }
});

app.post('/api/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email });
    if (!user || !(await bcrypt.compare(password, user.password))) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }
    const token = jwt.sign({ id: user._id }, SECURITY.JWT_SECRET, { expiresIn: '1h' });
    res.json({ token });
  } catch (error) {
    res.status(500).json({ error: 'Login failed' });
  }
});

app.post('/api/payment/stripe', async (req, res) => {
  try {
    const { amount, currency, source } = req.body;
    const payment = await stripe.charges.create({
      amount,
      currency,
      source,
      description: 'Example charge'
    });
    res.json(payment);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Health check
const healthCheck = async () => ({
  status: 'ok',
  timestamp: Date.now(),
  checks: {
    database: await checkDatabase(),
    memory: process.memoryUsage(),
    uptime: process.uptime()
  }
});

// Error handling
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Internal Server Error' });
});

// Cluster mode for production
if (cluster.isMaster && process.env.NODE_ENV === 'production') {
  console.log(`Master ${process.pid} is running`);
  for (let i = 0; i < numCPUs; i++) cluster.fork();
  cluster.on('exit', (worker) => {
    console.log(`Worker ${worker.process.pid} died`);
    cluster.fork();
  });
} else {
  const server = http.createServer(app);
  createTerminus(server, {
    healthChecks: { '/health': healthCheck },
    signals: ['SIGINT', 'SIGTERM'],
    onSignal: () => {
      console.log('Server is starting cleanup');
      return Promise.all([
        mongoose.connection.close(),
        new Promise(resolve => server.close(resolve))
      ]);
    }
  });

  const PORT = process.env.PORT || 3000;
  server.listen(PORT, () => {
    console.log(`Worker ${process.pid} started on port ${PORT}`);
  });
}

// React Frontend
const Dashboard = () => {
  const [data, setData] = useState(null);

  useEffect(() => {
    fetch('/api/health')
      .then(res => res.json())
      .then(setData);
  }, []);

  return (
    <div style={{ padding: '20px' }}>
      <h1>Welcome to the Dashboard</h1>
      {data && (
        <div>
          <p>Status: {data.status}</p>
          <p>Uptime: {Math.floor(data.checks.uptime / 60)} minutes</p>
        </div>
      )}
    </div>
  );
};

if (typeof document !== 'undefined') {
  ReactDOM.render(
    <React.StrictMode>
      <Dashboard />
    </React.StrictMode>,
    document.getElementById('root')
  );
}

// Utility functions
async function checkDatabase() {
  try {
    await mongoose.connection.db.admin().ping();
    return 'connected';
  } catch (err) {
    return 'disconnected';
  }
}

// Exports for testing
export { app, User, SECURITY };
